https://practice.geeksforgeeks.org/problems/trapping-rain-water/0#

Given an array arr[] of N non-negative integers representing height of blocks at index i as Ai where the width of each block is 1. Compute how much water can be
trapped in between blocks after raining.
Structure is like below:
|  |
|_|
We can trap 2 units of water in the middle gap.



Input:
The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains an integer N denoting 
the size of the array, followed by N space separated numbers to be stored in array.

Output:
Output the total unit of water trapped in between the blocks.

Constraints:
1 <= T <= 100
3 <= N <= 107
0 <= Ai <= 108

Example:
Input:
2
4
7 4 0 9
3
6 9 9

Output:
10
0

Explanation:
Testcase 1: Water trapped by block of height 4 is 3 units, block of height 0 is 7 units. So, total unit of water trapped is 10 units.
 


#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int main() {
	//code
	int t;
	cin>>t;
	while(t--)
	{
	    int n;
	    cin>>n;
	    int ar[n];
	    for(int i=0;i<n;i++)
	    {
	        cin>>ar[i];
	    }
	    int l[n];
	    int r[n];
	    
	   l[0]=ar[0];
	   r[n-1]=ar[0];
	   int mx=ar[0];
	   int mxr=ar[n-1];
	   for(int i=1;i<n;i++)
	   {
	       l[i]=max(mx,ar[i]);
	       mx=max(mx,ar[i]);
	   }
	    for(int i=n-2;i>=0;i--)
	   {
	       r[i]=max(mxr,ar[i]);
	       mxr=max(mxr,ar[i]);
	   }
	   
	   int sum=0;
	   for(int i=1;i<n-1;i++)
	   {
	     
	     sum=sum+min(l[i],r[i])-ar[i];    
	       
	   }
	    cout<<sum<<endl; 
	}
	return 0;
}
